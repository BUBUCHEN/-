#include <iostream>
#include <string>
using namespace std;
int spot,line,inf=2147483647;
int path [1000][1000];
int dist[1000]={};
int on_fire_t[1000];
int was_father[1000];
int yourdad[1000];


void dijkstra(int u)
{
  int start = u;
  dist [start] = on_fire_t[start];
  for(int i=0; i<spot; i++)
  {
    int max = 0;
    for (int j=1; j<spot+1; j++)
    {
      if (max< on_fire_t[j] and was_father[j]==0)
      {
        max = on_fire_t[j];
        start = j;
      }
    }
    was_father[start] = 1;
    for (int k=1; k<spot+1; k++)
    {
      if (path[start][k]<inf and dist[k]<on_fire_t[k]){
          dist[k] = on_fire_t[k];
          yourdad[k] = start;
      }
    }
  }
}

int complete_path (int s, int e, int p)
{
  if(s==e)
  {
    return p;
  }
  p = 10*p + yourdad[e];
  complete_path(s,yourdad[e],p);
}




int main()
{
  int s,end;
  cin>>spot>>line>>s>>end;
  for (int i=0; i<1000; i++)
  {
    dist [i] = 0;
    was_father [i] = 0;
    for (int j=0; j<1000; j++)
    {
      path[i][j] = inf;
      if (i==j)
      {
        path[i][j]=0;
      }
    }
  }

  for (int i=0; i<line; i++)
  {
    int x,y,z;
    cin>>x>>y>>z;
    path[x][y]=z;
  }
  dijkstra(1);
  string result = to_string(complete_path(s,end,end));
  cout<<"Path:";
  for (int i=result.size()-1; i>=0; i--)
  {
    cout<<" "<<result[i];
  }
  return 0;
}
